import pyNN.nest as sim

weight_arrays = [[[-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37893414], [ 0.37993815],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [ 0.37994072], [ 0.38173598], [ 0.37863041],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [ 0.37912209], [ 0.379774  ], [ 0.34541412], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.37986554], [ 0.36213236], [ 0.36586475], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37873699],
 [ 0.35939422], [ 0.37898267], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37955018], [ 0.37206734],
 [ 0.37217208], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [ 0.37913707], [ 0.37051356], [ 0.36319566],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [ 0.37916776], [ 0.37883322], [ 0.37934466], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.38000163], [ 0.37894856], [ 0.37840086], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.37932718], [ 0.38074712], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ]],
[[-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37247238],
 [ 0.36735117], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38093725],
 [ 0.3717448 ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.36497841],
 [ 0.35897381], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.26894045],
 [ 0.36450163], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38155329],
 [ 0.3521872 ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38257754],
 [ 0.38238504], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38064916],
 [ 0.29877583], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.36286678],
 [ 0.38064916], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38202761],
 [ 0.3704578 ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38155216],
 [ 0.38114797], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ]],
[[-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.38773751], [ 0.33233525], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.37656854], [ 0.37050136], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ]],
[[-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.38169445], [ 0.37843415], [ 0.38362298], [ 0.38237579], [ 0.38190109],
 [ 0.36226214], [ 0.38199136], [ 0.36300551], [ 0.38166491], [ 0.37678854],
 [ 0.38151048], [ 0.36365919], [ 0.36537891], [ 0.36307167], [ 0.3742631 ],
 [ 0.38087776], [ 0.37446347], [ 0.38319417], [ 0.35786   ], [ 0.37564238],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ]],
[[ 0.31673108], [ 0.38001057], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.35669573], [ 0.36597922], [ 0.37714359], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [ 0.37947696], [ 0.36677087], [ 0.38094546], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [ 0.35787886], [ 0.37894748], [ 0.35855189],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37929798], [ 0.35864884],
 [ 0.37904473], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [ 0.38054724],
 [ 0.36886997], [ 0.36666788], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [ 0.38050411], [ 0.37862141], [ 0.36992226], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [ 0.37963645], [ 0.38093892], [ 0.37944364], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [ 0.37887977], [ 0.36666069], [ 0.37818953],
 [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ], [-0.4       ],
 [-0.4       ], [-0.4       ], [-0.4       ], [ 0.37414787], [ 0.36022161]]]

input_rates_arrays = [[0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63,
	    0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0,
	    0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0,
	    0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0,
	    63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0,
	    0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0,
	    0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0,
	    0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0,
	    0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	    63, 63, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0],
           [63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0,
	    0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0,
	    0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0,
	    0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0,
	    0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63]]

# Builds a network with the given weights
def build_network(static_weights):
    in_p = sim.Population(size=len(static_weights),
                          cellclass=sim.SpikeSourcePoisson(rate=0))
    out_p = sim.Population(1, sim.IF_curr_exp())
    proj = sim.Projection(in_p, out_p, sim.AllToAllConnector(),
                          sim.StaticSynapse(weight=static_weights))
    return {'in_p': in_p, 'out_p': out_p, 'proj': proj}

sim.setup()

print('Built networks')

networks = []
for static_weights in weight_arrays:
    network = build_network(static_weights)
    networks.append(network)

# For each different input image, set the spike rate of the neurons in all
# networks to it and run the recongnition.
for i in range(5):
    print('Set up network', i)
    for network in networks:
        network['in_p'].set(rate=input_rates_arrays[i])
    sim.run(500)

sim.end()
